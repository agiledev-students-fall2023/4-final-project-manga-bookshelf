import express from 'express'
import passport from 'passport'

import postModel from '../Model/postModel.js'
import commentModelV2 from '../Model/commentModelV2.js';

const forumRouter = () => {

    const router = express.Router();

    router.get("/", passport.authenticate("jwt", { session: false }), (req, res, next) => {
        res.json({
            success: true,
            message: "Protected Forum Route",
        });
        next();
    })

    //get the information for all of the forum
    router.get("/forumpost/get", passport.authenticate("jwt", { session: false }), async (req, res, next) => {
        try {
            const posts = await postModel.find({});
            res.json({success: true, data: posts});
        } catch (err) {
            next(err);
        }
    })

    //get information of one forum 
    router.get("/forumpost/get/single/:id", passport.authenticate("jwt", { session: false }), async (req, res, next) => {
        try {
            const post = await postModel.findById(req.params.id);
            if (!post) {
                return res.status(404).json({ message: 'Post not found' });
            }
            res.json(post);
        } catch (err) {
            next(err);
        }
    })

    // post the information to database 
    // content is in the format: 
    // {
    //     creator: "username",
    //     creatorId: "usernameid",
    //     title: "title",
    //     body: "body",
    //     likes: 0,
    //     comments: []
    // }
    router.post("/forumpost/add", passport.authenticate("jwt", { session: false }), async (req, res, next) => {
        try {
            const content = req.body

            const newPost = new postModel(content);
            const savedPost = await newPost.save();
            res.json(savedPost);
        } catch (err) {
            next(err);
        }
    })

    //updating the information of the forumpost (Generated by GPT : Haven't tested yet) 
    router.put("/forumpost/update/:id", passport.authenticate("jwt", { session: false }), async (req, res, next) => {
        try {
            const content = req.body.payload;
            const post = await postModel.findById(req.params.id);
            if (!post) {
                return res.status(404).json({ message: 'Post not found' });
            }
            post.title = content.title;
            post.body = content.body;
            await post.save();
            res.json(post);
        } catch (err) {
            next(err);
        }
    })

    //delete forumpost 
    router.delete("/forumpost/delete/:id", passport.authenticate("jwt", { session: false }), async (req, res, next) => {
        try {
            await postModel.findByIdAndDelete(req.params.id);
            res.json({ message: "Post deleted" });
        } catch (err) {
            next(err);
        }
    })

    //retrieve comment by commentId 
    router.get("/comment/get/:commentId", passport.authenticate("jwt", { session: false }), async (req, res, next) => {
        try {
            const comment = await commentModelV2.findById(req.params.commentId);
            res.json({success: true, comment: comment});
        } catch (err) {
            next(err);
        }
    })

    //retrieve all comment id for specific forum
    router.get("/comment/get/:forumId", passport.authenticate("jwt", { session: false }), async (req, res, next) => {
        try {
            const post = await postModel.findById(req.params.forumId);
            res.json({success: true, comments: post.comments});
        } catch (err) {
            next(err);
        }
    })

    //add comment to a forumpost given forumId
    //req.body is in the format: 
    //{
    //     usernameId: "usernameid",
    //     username: "username",
    //     comment: "comment",
    // }
    router.post("/comment/add/:forumId", passport.authenticate("jwt", { session: false }), async (req, res, next) => {
        try {
            const content = req.body;
            const newComment = new commentModelV2(content);
            const savedComment = await newComment.save();
            const post = await postModel.findById(req.params.forumId);
            post.comments.push(savedComment._id);
            await post.save();
            res.json({success:true,message:"Comment added"});
        } catch (err) {
            next(err);
        }
    })
    
    //deleting comments in posts (given both the forumId and commentId)
    router.delete("/comment/delete/:forumId/:commentId", passport.authenticate("jwt", { session: false }), async (req, res, next) => {
        try {
            const commentDB = await commentModelV2.findById(req.params.commentId); //find comment in db
            console.log(commentDB) 
            const postDB = await postModel.findById(req.params.forumId); //find post which we want to remove the element from 
            console.log(postDB) 

            let index; 
            postDB.comments.forEach(element => {
                if(element._id === req.params.commentId){
                    index = postDB.comments.indexOf(element)
                }
            })

            postDB.comments.splice(index, 1); //remove 

            await postDB.save();
            await commentModelV2.findByIdAndDelete(req.params.commentId);
            res.json({ message: "Comment deleted" });
        } catch (err) {
            next(err);
        }
    })

    return router
}

export default forumRouter